
substitutions:
  # JC Services: directory, radius, sso, systems, ldap, mdm
  # Can accept multiple values' for example:  _JC_SERVICE: directory,systems or gather logs from all services with the _JC_SERVICE: all
  _JC_SERVICE: "all"
  _BUCKET_NAME:  ""
  _FUNCTION_NAME: ""
  _SCHEDULE_NAME: ""
  _SCHEDULE_CRON_TIME: ""
  _SERVICE_ACCOUNT_EMAIL: ""
  _REGION_LOCATION: ""
  _SECRET_JC_API_KEY_NAME: ""
  _SECRET_JC_ORG_ID_NAME: ""
  _MEMORY: 256M
  _MAX_RETRY_ATTEMPTS: '2'
  _MAX_RETRY_DURATION: "5m"
  _MAX_BACKOFF: "2m"
  _MIN_BACKOFF: "1m"

steps:
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  args:
    - gcloud
    - functions
    - deploy
    - $_FUNCTION_NAME
    - --docker-registry=container-registry
    - --region=$_REGION_LOCATION
    - --entry-point=run_di
    - --service-account=$_SERVICE_ACCOUNT_EMAIL
    - --source=.
    - --trigger-http
    - --runtime=python39
    - --memory=$_MEMORY
    - --set-secrets=jc_api_key=$_SECRET_JC_API_KEY_NAME:latest,jc_org_id=$_SECRET_JC_ORG_ID_NAME:latest
    - --set-env-vars=^:^cron_schedule=$_SCHEDULE_CRON_TIME:service=$_JC_SERVICE:bucket_name=$_BUCKET_NAME

# Schedule
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: bash
  args:
    - -c
    - |
      functionsURL=$(gcloud functions describe $_FUNCTION_NAME --region=$_REGION_LOCATION --flatten=httpsTrigger.url)
      url=$(echo ${functionsURL} | grep -Eo 'https?://[^ ")]+')
      echo "URL: $url"
      gcloud scheduler jobs create http $_SCHEDULE_NAME --location=$_REGION_LOCATION --schedule="$_SCHEDULE_CRON_TIME" --uri="$url" --http-method=GET --oidc-service-account-email="$_SERVICE_ACCOUNT_EMAIL" --min-backoff=$_MIN_BACKOFF --max-backoff=$_MAX_BACKOFF --max-retry-attempts=$_MAX_RETRY_ATTEMPTS --max-retry-duration=$_MAX_RETRY_DURATION
